"""
Django settings for FDCS project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

LOG_DIR = os.path.join(BASE_DIR, "projectlogs")

if not os.path.exists(LOG_DIR):
    try:
        os.makedirs(LOG_DIR)
    except OSError as e:
        # 处理并发创建目录的可能性或其他错误
        print(f"Warning: Could not create log directory {LOG_DIR}. Error: {e}")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-hlzjiwsc*kuv-z5h2#2f89q_74!-3ryisix33&cqi1qex7gnio"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "FDCSM.apps.FdcsmConfig",
    "import_export",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "FDCSM.middleware.auth.AuthMiddleware",
]

ROOT_URLCONF = "FDCS.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "FDCS.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": BASE_DIR / "db.sqlite3",
    # }
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "FDCS",
        "USER": "user1",
        "PASSWORD": "Admin@SQL1",
        "HOST": "localhost",
        "PORT": "3306",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {  # 定义日志格式
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file_errors": {  # 修改 handler 名称，更具描述性
            "level": "ERROR",
            # 'class': 'logging.FileHandler',                   # 基本的文件处理器
            "class": "logging.handlers.RotatingFileHandler",  # 使用日志滚动
            "filename": os.path.join(
                LOG_DIR, "django_errors.log"
            ),  # 使用上面定义的 LOG_DIR
            "maxBytes": 1024 * 1024 * 5,  # 5 MB - 文件最大尺寸
            "backupCount": 5,  # 保留的备份文件数量
            "formatter": "verbose",  # 使用详细格式
        },
        "console": {
            "level": "INFO",  # 开发时可以设为 DEBUG
            "class": "logging.StreamHandler",
            "formatter": "simple",  # 使用简单格式
        },
    },
    "loggers": {
        "django": {  # Django 框架本身的日志
            "handlers": ["console", "file_errors"],  # 同时输出到控制台和错误日志文件
            "level": "INFO",  # Django 日志的最低级别 (ERROR 会被 file_errors 捕获)
            "propagate": True,  # 允许日志传播到父 logger (root logger)
        },
        "django.request": {  # 专门处理请求相关的错误，如 5XX 错误
            "handlers": ["file_errors"],  # 500 错误会记录到这里
            "level": "ERROR",
            "propagate": False,  # 通常不希望请求错误再次被 'django' logger 处理
        },
        # "yourapp": {  # 如果你有自定义的 app 日志
        #     "handlers": ["console", "file_errors"],  # 也可以记录你 app 的错误
        #     "level": "DEBUG",  # 或者你需要的级别
        #     "propagate": True,
        # },
    },
    # 可以添加 root logger 来捕获所有未被特定 logger 处理的日志
    # 'root': {
    #     'handlers': ['console', 'file_errors'],
    #     'level': 'WARNING',
    # },
}


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "FDCSM/static"),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"
